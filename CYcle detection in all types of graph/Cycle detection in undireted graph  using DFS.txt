

bool solve(int i,vector<int>adj[],vector<int>&visited,int parent)
{
    visited[i] =true;
    for(auto it:adj[i])
    {
        if(!visited[it])
        {
            if(solve(it,adj,visited,i))
            return true;
        }
        else if(parent!=it)
        {
            return true;
        }
    }
    return false;
}





string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<int>adj[n+1];
    for(int i=0;i<m;i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);

    }
    vector<int>visited(n+1,false);
    bool ans=false;

    for (int i = 0; i < n; i++) {
      if (!visited[i]) {
        if(solve(i, adj, visited, -1))
          return "Yes";
      }
    }
   
    return "No";
}


